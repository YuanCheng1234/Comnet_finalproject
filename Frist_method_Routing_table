import time
from socket import socket, AF_INET, SOCK_DGRAM
import struct
import select
import random
import asyncore
import sys
from prettytable import PrettyTable

class Graph:
    def __init__(self, vertices_dic):
        self.vertices_dic = vertices_dic


    def vertices(self):
        vertices_list = list(self.vertices_dic.keys())
        return vertices_list


    def find_all_paths(self, start_vertex, end_vertex, path = []):

        graph = self.vertices_dic
        path = path + [start_vertex]
        if start_vertex == end_vertex:
            return [path]

        paths = []
        for vertex in graph[start_vertex]:
            if vertex not in path:
                extended_paths = self.find_all_paths(vertex,end_vertex,path)
                for p in extended_paths:
                    paths.append(p)
        return paths


    def shortest(self,start_vertex, end_vertex):
        path_length = []
        paths = self.find_all_paths(start_vertex, end_vertex, path = [])
        for j in range(0, len(paths)):

            path_length.append(len(paths[j]))

        shortest_length = min(path_length)
        pos = path_length.index(min(path_length))
        shortest_path = paths[pos]

        return shortest_length, shortest_path



    def create_routing_table(self, start_vertex):
        routing_table = PrettyTable()
        routing_table.field_names = ["DEST", "PATH", "COST"]
        for node in graph.vertices():
            routing_list = list(graph.shortest(start_vertex, node))

            routing_table.add_row([routing_list[1][-1], routing_list[1], routing_list[0]])
        return routing_table


    '''def create_routing_table(self, start_vertex):

        print("DEST\tPATH\tCOST")
        for node in graph.vertices():
            routing_list = list(graph.shortest(start_vertex, node))

            print(routing_list[1][-1], routing_list[1], routing_list[0])
        return None'''




if __name__ == '__main__':
    g = {"192.168.4.1": ["192.168.4.2"],
         "192.168.4.2": ["192.168.1.3", "192.168.2.3", "192.168.3.3"],
         "192.168.1.3": ["192.168.1.2"],
         "192.168.1.2": ["192.168.1.1", "192.168.2.2"],
         "192.168.1.1": ["192.168.1.2"],
         "192.168.2.3": ["192.168.2.2"],
         "192.168.2.2": ["192.168.2.1", "192.168.3.2"],
         "192.168.2.1": ["192.168.2.2"],
         "192.168.3.3": ["192.168.3.2"],
         "192.168.3.2": ["192.168.3.1"],
         "192.168.3.1": ["192.168.3.2"]
         }

    graph = Graph(g)

    print(graph.create_routing_table('192.168.4.1'))
